# 문자(string)열 함수
# 문자열은 수정 불가
# ","는 그 숫자에 해당하는 시작점, 뒤는 끝점+1
# a = 'Hello Python'
# print(a.count('o'))#해당 문자가 몇개 존재하는지를 반환
# print(a.find('l'))# l이라는 문자가 처음 나오는 인덱스 번호 반환 단, 없는 문자응 찾을 경우 -1 반환
# print(a.index('l'))# l이라는 문자가 처음 나오는 인덱스 번호 반환 단, 없는 문자를 찾는 경우 에러 발생
# print(a.replace('py','my'))# old문자를 new문자로 바꾸어준다. "," 뒤에 쓰는 숫자는 몇개를 바꿔주느냐
# print(a.split())#괄호 안에 있는 문자를 기준으로 문자열을 나누어준다.단 괄호안에 아무것도 쓰지 않을 경우 공백을 기준으로 나누어준다.
# print(a.upper())#소문자를 대문자로
# print(a.lower())# 대문자를 소문자로
# print(','.join(a)) #인덱스 번호 사이사이에 해당 문자를 집어넣어준다.
# print(a.capitalize())#0번째 문자가 대문자로 변경된다.
# print(a.startswith('el')) #해당 문자로 시작하는지를 물어본다. True/False
# print(a.endswith('ton')) # 해당 문자로 끝나는지를 물어본다. True/ False
# print(a.is~)# is로 시작하는 함수들은 물어보는 함수 = True/ False를 반환
# print(a.isalnum()) # a라는 문자가 알파벳 또는 숫자인지를 물어본다.
# a = '123'
# print(a.isalpha()) # a라는 문자가 알파벳인지를 물어본다.
# print(a.isdigit()) #a 라는 문자가 숫자로 이루어져 있는지 물어본다.
# print(a.islower 또는 isupper()) 소문자인지 대문자인지 물어본다. True/False
# a = "HELLO PYTHON"
# b = '....str.ip.......'
#
# print(b.lstrip("."))
# print(b.strip("."))  # 괄호안에 있는 기준 문자열을 변수b에서 연속되는 동안 지워준다.
# print(b.rstrip("."))
# -------------------------------------------------------------
# 리스트(list)
# a = [4,1,2,[5,8,[9,7],3],6]
# 출력 8
# print(a[3][1])

# a = [4,1,2,3]
# 수정 2 => 'A'
# a[0] = 'A'
# print(a)

# 삭제 3
# del a[3]
# print(a)

# 덧셈
# a = [4,1,2,3]
# b = [5,6]
# print(a + b)
# print(b * 2)

# ----------------------------------------------------------------------
# 리스트(list) 관련 함수


# a = [4,1,2,3]
# 마지막에 마지막 인덱스 값 추가
# a.append(8)
# print(a)


# 원하는 위치에 마지막 인덱스 값 추가
# a.insert(2,8)
# print(a)

# 원하는 값 삭제
# a.remove(5)
# print(a)

# 원하는 위치/맨 마지막 값을 추출
# print(a.pop(1))
# print(a)

# 정렬
# 자료형의 참과 거짓 => 자료형의 값이 존재하면 참(True), 없으면 거짓(False)
# 정수의 거짓 = 0, 나머지는 모두 참

# print(a.sort())
# print(a)

# print(a.reverse())
# a.sort(reverse = True)
# print(a)

# 확장  == 추가할 자료형의 길이 만큼 확장한다.
# a = [4,1,2,3]
# b = [5,6]
#
# a. extend(b)
# print(a)

# ------------------------------------------------------------
# 튜플(Tuple)

# 튜플 만드는 방법
# a = (1,) #원소가 하나 있을때는 콤마(,)를 꼭 붙혀주어야 튜플로 인식한다.

# print(type(a))
# b = tuple([1,2,3,4]) #자료형의 변환()형변환

# c = 1,2,3,4
# print(type(c)) #소괄호를 붙히지 않아도 튜플로 인식한다. 단 원소가 여러개 있을 경우
# --------------------------------------------------------------------
# 딕셔너리
# d = {}
# d = {"A" : 1, "B" : 2, "C" : 3}
# 딕셔너리에 key - value 추가
# d["A"] = 1
# d["B"] = 2
# d["C"] = 3
# print(d)

# d = {"A" : 4, "B" : 5, "C" : 6}
# 딕셔너리의 key값에 해당하는 value값 수정
# d["A"] = 4
# d["B"] = 5
# d["C"] = 6
# print(d)

# 딕셔너리 key - value 삭제
#
# del d["C"]
#
# print(d)

#딕셔너리 멤버 메소드
# 딕셔너리의 키값들만 모으기
# print(d.keys())
# 딕셔너리의 벨류값들만 모으기
# print(d.values())
# 딕셔너리의 (키, 벨류) 모으기
# print(d.items())


# update()
# b = {"C":3,"D":2}
# print(d.update(b))
# print(d)

# print('A' in d.keys()) -> True
# print('A' in d) -> True
# print(4 in d.values()) -> True

# for i in d:
#     print(i) // print(d[i])
# --------------------------------------------------------------
# 집합의 특징
# 1. 중복된 값이 없다.]
# l = [1,2,3,1,1,3,2,3,1,2,3,1,4,2,4,2,3,2,1,2,1,3,4,2]
# s = set(l)
# print(s)
# 2. 순서가 없다.
# a = "Hello"
# s2 = set(a)
# print(s2)

# A = {1,2,3,4}
# B = {3,4,5,6}
# 합집합 두개 이상의 잡합의 합 shift + \(백슬래시) => |
# print(A | B)

# 차집합 A - B == A에서 B와 공통된 부분을 뺀 나머지
# print(A - B)

# 교집합  집합들의 공통된 부분들 A & B
# print(A & B)

# ---------------------------------------------------------------------
# 별찍기1
# n = int(input())
#
# for i in range(1,n+1):
#     print('*' * i)

# 별찍기2
# n = int(input())
# for i in range(1,n+1):
#     print(" " * (n-i) + '*' * i)

# 별찍기3
# n = int(input())
# for i in range(n):
#     print('*' * (n-i))

# 별찍기4
# n = int(input())
# for i in range(n,0,-1):
#     print(" " * (n-i) + '*' * i)

# 별찍기5
# n = int(input())
# for i in range(1,n+1):
#     print(" " * (n-i) + '*' * (2*i-1))

# 별찍기6
# n = int(input())
# for i in range(n):
#     print(" " * i + '*' * (2*(n-i)-1))
